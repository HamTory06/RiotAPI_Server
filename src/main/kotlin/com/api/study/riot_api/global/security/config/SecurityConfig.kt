package com.api.study.riot_api.global.security.configimport com.api.study.riot_api.global.security.filter.JwtFilterimport com.api.study.riot_api.global.security.jwt.JwtParserimport com.api.study.riot_api.global.security.jwt.JwtPropertiesimport lombok.RequiredArgsConstructorimport org.springframework.context.annotation.Beanimport org.springframework.context.annotation.Configurationimport org.springframework.security.config.annotation.web.builders.HttpSecurityimport org.springframework.security.config.annotation.web.builders.WebSecurityimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurityimport org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizerimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoderimport org.springframework.security.web.SecurityFilterChainimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@Configuration@EnableWebSecurity@RequiredArgsConstructorclass SecurityConfig(    private val jwtProperties: JwtProperties,    private val jwtParser: JwtParser) {    @Bean    fun webSecurityCustomizer(): WebSecurityCustomizer {        return WebSecurityCustomizer { web: WebSecurity ->            web.ignoring().antMatchers("/v3/api-docs/**", "/swagger-ui/**", "/swagger-resources/**")        }    }    @Bean    fun securityFilterChain(http: HttpSecurity): SecurityFilterChain {        http            .csrf().disable()            .cors()            .and()//            .sessionManagement()//            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)//            .and()            .authorizeRequests()            //auth            .antMatchers("/api/auth/**").permitAll()            //user            .antMatchers("/api/user/delete-user/{id}").authenticated()            .anyRequest().authenticated()            .and()            .addFilterBefore(                JwtFilter(jwtProperties, jwtParser), UsernamePasswordAuthenticationFilter::class.java            )        return http.build()    }    @Bean    protected fun passwordEncoder() = BCryptPasswordEncoder()}